"""
Django settings for singlecell_ai_insights project.

Generated by 'django-admin startproject' using Django 4.2.24.
"""

import os
from datetime import timedelta
from pathlib import Path

import boto3
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv()


def _env_bool(name, default):
    value = os.getenv(name)
    if value is None:
        return default
    return value.lower() == 'true'


SECRET_KEY = os.getenv(
    'DJANGO_SECRET_KEY', 'dev-only-secret-key-change-me-before-prod'
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG', 'True').lower() == 'true'

_env_allowed_hosts = os.getenv('DJANGO_ALLOWED_HOSTS')
ALLOWED_HOSTS = (
    [host.strip() for host in _env_allowed_hosts.split(',') if host.strip()]
    if _env_allowed_hosts
    else ['localhost', '127.0.0.1']
)


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third-party apps
    'corsheaders',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'django_extensions',
    # Local apps
    'singlecell_ai_insights',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'singlecell_ai_insights.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'singlecell_ai_insights.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

if os.getenv('DB_HOST'):
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DB_NAME', 'singlecell_ai'),
            'USER': os.getenv('DB_USER', 'postgres'),
            'PASSWORD': os.getenv('DB_PASSWORD', ''),
            'HOST': os.getenv('DB_HOST', 'localhost'),
            'PORT': os.getenv('DB_PORT', '5432'),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

AUTH_USER_MODEL = 'singlecell_ai_insights.User'


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': (
            'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'
        ),
    },
    {
        'NAME': (
            'django.contrib.auth.password_validation.MinimumLengthValidator'
        ),
    },
    {
        'NAME': (
            'django.contrib.auth.password_validation.CommonPasswordValidator'
        ),
    },
    {
        'NAME': (
            'django.contrib.auth.password_validation.NumericPasswordValidator'
        ),
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'singlecell_ai_insights.authentication.CookieJWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': ('rest_framework.permissions.AllowAny',),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(
        minutes=int(os.getenv('JWT_ACCESS_MINUTES', '15'))
    ),
    'REFRESH_TOKEN_LIFETIME': timedelta(
        days=int(os.getenv('JWT_REFRESH_DAYS', '7'))
    ),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'AUTH_COOKIE': os.getenv('JWT_ACCESS_COOKIE_NAME', 'sci_access'),
    'AUTH_REFRESH_COOKIE': os.getenv('JWT_REFRESH_COOKIE_NAME', 'sci_refresh'),
    'AUTH_COOKIE_DOMAIN': os.getenv('JWT_COOKIE_DOMAIN') or None,
    'AUTH_COOKIE_PATH': '/',
    'AUTH_REFRESH_COOKIE_PATH': '/api/auth/refresh/',
    'AUTH_COOKIE_HTTP_ONLY': True,
    'AUTH_COOKIE_SECURE': _env_bool('JWT_COOKIE_SECURE', not DEBUG),
    'AUTH_COOKIE_SAMESITE': os.getenv('JWT_COOKIE_SAMESITE', 'Lax'),
}

_env_cors_origins = os.getenv('DJANGO_CORS_ALLOWED_ORIGINS')

CORS_ALLOWED_ORIGINS = (
    [
        origin.strip()
        for origin in _env_cors_origins.split(',')
        if origin.strip()
    ]
    if _env_cors_origins
    else [
        'http://localhost:3000',
        'http://127.0.0.1:3000',
    ]
)

CORS_ALLOW_CREDENTIALS = True


# AWS clients & configuration
session = boto3.Session(region_name=os.environ['AWS_REGION'])
AWS_HEALTHOMICS_CLIENT = session.client('omics')
AWS_S3_CLIENT = session.client('s3')
AWS_S3_PRESIGN_TTL = int(os.environ['AWS_S3_PRESIGN_TTL'])
